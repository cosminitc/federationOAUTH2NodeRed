[
    {
        "id": "4c34539a4e0991ba",
        "type": "tab",
        "label": "Oauth2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6681e68b76916368",
        "type": "tab",
        "label": "testJWT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "39aa9db8058c7b09",
        "type": "subflow",
        "name": "getAccessToken",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 480,
                "wires": [
                    {
                        "id": "1e3bb1e205b2466a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 480,
                "wires": [
                    {
                        "id": "1a4c93e7a727abef",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "38b26726a9015a16",
        "type": "subflow",
        "name": "checkAccessToken",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 320,
                "wires": [
                    {
                        "id": "48a063aca67f4268"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1980,
                "y": 320,
                "wires": [
                    {
                        "id": "6869eaef62394803",
                        "port": 1
                    },
                    {
                        "id": "f5800ab285d18b2e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "067290dd8a4f4ac4",
        "type": "subflow",
        "name": "refreshAccessToken",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 440,
                "y": 280,
                "wires": [
                    {
                        "id": "75999e798ac2c534"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 280,
                "wires": [
                    {
                        "id": "70ef69609a6ed17e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a17755dc14fb6e09",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "save popupid and _msgid to session",
        "func": "global.set(msg.payload.popup,msg);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": []
    },
    {
        "id": "6a6831cfa71b4741",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/waitForAuthMainPage",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "a17755dc14fb6e09"
            ]
        ]
    },
    {
        "id": "1a4c93e7a727abef",
        "type": "https-node",
        "z": "39aa9db8058c7b09",
        "name": "token validation with nam",
        "method": "use",
        "ret": "txt",
        "url": "",
        "authorized": false,
        "agent": true,
        "x": 790,
        "y": 480,
        "wires": [
            [
                "4d0a82d78fe96d97",
                "800132fa84093324"
            ]
        ]
    },
    {
        "id": "1e3bb1e205b2466a",
        "type": "function",
        "z": "39aa9db8058c7b09",
        "name": "prepare post for token validation",
        "func": "\n\nvar redirectUri = msg.payload.redirect_uri;\nvar code = msg.payload.code;\n\n\nmsg.payload ={};\n\nmsg.url = global.get(\"idpToken\");\n\nmsg.method = \"POST\";\n\nmsg.headers = {};\nmsg.headers[\"Content-type\"] = \"application/x-www-form-urlencoded\";\n\nmsg.payload[\"grant_type\"] =\"authorization_code\";\nmsg.payload[\"client_id\"]= global.get(\"clientId\");\nmsg.payload[\"redirect_uri\"] = redirectUri;\nmsg.payload[\"client_secret\"] = global.get(\"clientSecret\");\nmsg.payload[\"code\"] = code;\nmsg.payload[\"resourceServer\"] = \"Identity Provider\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "1a4c93e7a727abef"
            ]
        ]
    },
    {
        "id": "48a063aca67f4268",
        "type": "function",
        "z": "38b26726a9015a16",
        "name": "add all params",
        "func": "\n\n\nglobal.set(msg._msgid,msg);\n\n\nmsg.payload ={};\n\nmsg.url = global.get(\"idpTokenCheck\");\n\nmsg.method = \"POST\";\n\nmsg.headers = {};\n\nvar base64Basic = (new Buffer(global.get(\"clientId\")+\":\"+global.get(\"clientSecret\")).toString('base64'));\n\nmsg.headers[\"Authorization\"] = \"Basic \" + base64Basic;\nmsg.headers[\"Content-type\"] = \"application/x-www-form-urlencoded\";\n\nmsg.payload[\"token\"] = msg.req.headers[\"token\"];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "99e5afbf4b05118c"
            ]
        ]
    },
    {
        "id": "99e5afbf4b05118c",
        "type": "https-node",
        "z": "38b26726a9015a16",
        "name": "Token status check",
        "method": "use",
        "ret": "txt",
        "url": "",
        "authorized": false,
        "agent": true,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "8b50d750e48c19f2"
            ]
        ]
    },
    {
        "id": "75999e798ac2c534",
        "type": "function",
        "z": "067290dd8a4f4ac4",
        "name": "add all params",
        "func": "\n\n\nvar refreshToken = msg.payload.refresh_token;\n\n\nmsg.payload ={};\n\nmsg.url = global.get(\"idpToken\");\n\nmsg.method = \"POST\";\n\nmsg.headers = {};\nmsg.headers[\"Content-type\"] = \"application/x-www-form-urlencoded\";\n\nmsg.payload[\"grant_type\"] =\"refresh_token\";\nmsg.payload[\"client_id\"]=global.get(\"clientId\");\nmsg.payload[\"client_secret\"] = global.get(\"clientSecret\");\nmsg.payload[\"refresh_token\"] = refreshToken;\nmsg.payload[\"scope\"] = \"profile openid\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "659b34ddf06e3ed3"
            ]
        ]
    },
    {
        "id": "659b34ddf06e3ed3",
        "type": "https-node",
        "z": "067290dd8a4f4ac4",
        "name": "refresh token request",
        "method": "use",
        "ret": "txt",
        "url": "",
        "authorized": false,
        "agent": true,
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "70ef69609a6ed17e"
            ]
        ]
    },
    {
        "id": "da373f7846996131",
        "type": "comment",
        "z": "4c34539a4e0991ba",
        "name": "Programma Vero",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "e0df651ccfc35389",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/generateToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "51f0a49fe64cda44"
            ]
        ]
    },
    {
        "id": "51f0a49fe64cda44",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "save popup id",
        "func": "\nglobal.set(msg._msgid,msg.payload.popup);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "89ee855be4aa9c4d"
            ]
        ]
    },
    {
        "id": "89ee855be4aa9c4d",
        "type": "subflow:39aa9db8058c7b09",
        "z": "4c34539a4e0991ba",
        "name": "",
        "env": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "67f2bfa853be2c90"
            ]
        ]
    },
    {
        "id": "fe862a2d62a5f6bb",
        "type": "inject",
        "z": "4c34539a4e0991ba",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "b13b618d232aff7f"
            ]
        ]
    },
    {
        "id": "b13b618d232aff7f",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "Set all global variables",
        "func": "global.set(\"idpToken\",\"https://amserver.dominio.prova/nidp/oauth/nam/token\");\nglobal.set(\"idpTokenCheck\",\"https://amserver.dominio.prova/nidp/oauth/v1/nam/introspect\");\nglobal.set(\"idpUserInfo\",\"https://amserver.dominio.prova/nidp/oauth/nam/userinfo\");\n\nglobal.set(\"clientSecret\",\"hIBtBS6ESOIqhQS4Ot49gNv2SMT12jHUYmosVyy1Pu0-s_z8sR04ToGz6qoV1LAqAuaOHtZcjQFS3ktsxv_7VA\");\nglobal.set(\"clientId\",\"9b189cfb-9355-4855-86f0-ad5f4af155fa\");\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 140,
        "wires": []
    },
    {
        "id": "67f2bfa853be2c90",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "retrive main page msg and gives protected data ",
        "func": "\n\nif(msg.statusCode == 200){\n    \n    var popup = global.get(msg._msgid);\n    global.set(msg._msgid,undefined);\n\n    var msgPayload = msg.payload;\n    \n    msg = global.get(popup);\n    global.set(popup,undefined);\n\n    return msg;\n    \n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "703e619508a499a2"
            ]
        ]
    },
    {
        "id": "4d0a82d78fe96d97",
        "type": "http response",
        "z": "39aa9db8058c7b09",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "703e619508a499a2",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "95d6ed5ac51fa92c",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/validateExistingToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "832e887755cfaf1e"
            ]
        ]
    },
    {
        "id": "832e887755cfaf1e",
        "type": "subflow:38b26726a9015a16",
        "z": "4c34539a4e0991ba",
        "name": "",
        "env": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "29b15d70a6bef938"
            ]
        ]
    },
    {
        "id": "4eafe9c244aa5d0c",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "1df8601482b6c9d8",
        "type": "subflow:067290dd8a4f4ac4",
        "z": "4c34539a4e0991ba",
        "name": "",
        "env": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "042f37ec18365d5b"
            ]
        ]
    },
    {
        "id": "042f37ec18365d5b",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 500,
        "wires": []
    },
    {
        "id": "527e38cacc9623f7",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "msg.payload = + new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "451e3551beb3284a"
            ]
        ]
    },
    {
        "id": "ef2d65d5e17c1ecc",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/prova",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 640,
        "wires": [
            [
                "7f1a9c48a5a5234c"
            ]
        ]
    },
    {
        "id": "451e3551beb3284a",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 640,
        "wires": []
    },
    {
        "id": "c5a9b2cadb5875e0",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/prova2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "edb4d855bf97fdf8"
            ]
        ]
    },
    {
        "id": "163d277c1c150cb0",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/refreshExistingToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "1df8601482b6c9d8"
            ]
        ]
    },
    {
        "id": "7f1a9c48a5a5234c",
        "type": "subflow:38b26726a9015a16",
        "z": "4c34539a4e0991ba",
        "name": "",
        "env": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "d8511c752d710dfc"
            ]
        ]
    },
    {
        "id": "edb4d855bf97fdf8",
        "type": "subflow:38b26726a9015a16",
        "z": "4c34539a4e0991ba",
        "name": "",
        "env": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "531a3743074858c5"
            ]
        ]
    },
    {
        "id": "8b50d750e48c19f2",
        "type": "function",
        "z": "38b26726a9015a16",
        "name": "check if token still active",
        "func": "\n\nvar json = JSON.parse(msg.payload);\n\nmsg[\"tokenStatus\"] = json.active;\n\n\n\nreturn msg;\n    \n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "6869eaef62394803"
            ]
        ]
    },
    {
        "id": "70ef69609a6ed17e",
        "type": "function",
        "z": "067290dd8a4f4ac4",
        "name": "set status to true",
        "func": "var json = JSON.parse(msg.payload);\n\nif(json.error == \"invalid_grant\"){\n    json[\"tokenStatus\"] = false;\n\n}else{\n    json[\"tokenStatus\"] = true;\n}\nvar msgId = msg._msgid;\nmsg.payload = JSON.stringify(json);\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ba90d4087f662f00",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "check if token still active",
        "func": "\n\nvar group = \"amministrazione\";\n\nvar isGroupValid = false;\n\n\nif(msg.tokenStatus){\n    \n \n\n    for(let x = 0; x < msg[\"groups\"].length;x ++){\n        \n        if(msg[\"groups\"][x] == group){\n            isGroupValid = true;\n        }\n    \n    }\n    \n  \n    if(isGroupValid){\n\n         return [null,msg];\n    }\n    else\n    {\n      \n        msg.statusCode = 400;\n        msg.payload = msg.tokenStatus;\n  \n        return [msg,null];\n    }\n  \n   \n    \n    \n}\n\nelse{\n    \n\n    msg.statusCode = 400;\n    msg.payload = msg.tokenStatus;\n   \n    return [msg,null];\n    \n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 640,
        "wires": [
            [
                "845e32c4b0018097"
            ],
            [
                "527e38cacc9623f7"
            ]
        ]
    },
    {
        "id": "845e32c4b0018097",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 540,
        "wires": []
    },
    {
        "id": "6869eaef62394803",
        "type": "function",
        "z": "38b26726a9015a16",
        "name": "create request for userinfo",
        "func": "\n\nif(msg[\"tokenStatus\"]){\n    \n    msg = global.get(msg._msgid);\n    \n    msg.url = global.get(\"idpUserInfo\");\n\n    msg.method = \"POST\";\n    \n    msg.headers = {};\n    msg.headers[\"Authorization\"] = \"Bearer \"+msg.req.headers[\"token\"];\n    msg.headers[\"Content-type\"] = \"application/x-www-form-urlencoded\";\n\n    return [msg,null];\n}\nelse{\n    return [null,msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 320,
        "wires": [
            [
                "53cde7c36a406506"
            ],
            []
        ]
    },
    {
        "id": "53cde7c36a406506",
        "type": "https-node",
        "z": "38b26726a9015a16",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "authorized": false,
        "agent": true,
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "f5800ab285d18b2e"
            ]
        ]
    },
    {
        "id": "a241121aceaaed88",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "check if token still active",
        "func": "\n\nvar group = \"tecnico\";\n\nvar isGroupValid = false;\n\nif(msg.tokenStatus){\n    \n    for(let x = 0; x < msg[\"groups\"].length;x ++){\n    \n        if(msg[\"groups\"][x] == group){\n            isGroupValid = true;\n        }\n    \n    }\n    \n    \n    if(isGroupValid){\n      \n         return [null,msg];\n    }\n    else\n    {\n        msg.statusCode = 400;\n        msg.req.headers[\"tokenStatus\"] = msg.tokenStatus;\n\n        return [msg,null];\n    }\n  \n   \n    \n    \n}\n\nelse{\n    \n\n    msg.statusCode = 400;\n    msg.req.headers[\"tokenStatus\"] = msg.tokenStatus;\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 780,
        "wires": [
            [
                "d5900aa5f39280c6"
            ],
            [
                "446604960aeafbe3"
            ]
        ]
    },
    {
        "id": "446604960aeafbe3",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "msg.payload = Math.random(2452423);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 780,
        "wires": [
            [
                "90500454ebfb8186"
            ]
        ]
    },
    {
        "id": "90500454ebfb8186",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 780,
        "wires": []
    },
    {
        "id": "d5900aa5f39280c6",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1370,
        "y": 700,
        "wires": []
    },
    {
        "id": "d8511c752d710dfc",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "get array of groups",
        "func": "\n\nvar tokenStatus = msg[\"tokenStatus\"];\n\nif(tokenStatus){\nvar json = JSON.parse(msg.payload);\nvar ldapGroups = Object.values(json)[1];\n\nvar groups = [];\n\nfor(let i = 0; i < ldapGroups.length; i++){\n    \n    let equalDiscovered = false;\n    let string = \"\";\n    for(let x = 0; x < ldapGroups[i].length; x++){\n        if(equalDiscovered){\n            let char = ldapGroups[i].substring(x,x+1);\n            if(char == \",\"){\n                groups.push(string);\n                break;\n            }\n            else{\n                string += char;\n            }\n            \n            \n        }\n        else{\n            let char = ldapGroups[i].substring(x,x+1);\n            if(char == \"=\"){\n                equalDiscovered = true;\n            }\n        }\n        \n    }\n    \n}\n\nmsg[\"groups\"] = groups;\n\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 640,
        "wires": [
            [
                "ba90d4087f662f00"
            ]
        ]
    },
    {
        "id": "531a3743074858c5",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "get array of groups",
        "func": "var tokenStatus = msg[\"tokenStatus\"]\n\nif(tokenStatus){\n    var json = JSON.parse(msg.payload);\n   \n    var ldapGroups = json[\"group\"];\n   \n    var groups = [];\n\n    for(let i = 0; i < ldapGroups.length; i++){\n    \n        let equalDiscovered = false;\n        let string = \"\";\n        for(let x = 0; x < ldapGroups[i].length; x++){\n            if(equalDiscovered){\n                let char = ldapGroups[i].substring(x,x+1);\n                if(char == \",\"){\n                    groups.push(string);\n                    break;\n                }\n                else{\n                    string += char;\n                }\n            \n            \n            }\n            else{\n                let char = ldapGroups[i].substring(x,x+1);\n                if(char == \"=\"){\n                    equalDiscovered = true;\n                }\n            }\n        \n        }\n    \n    }\n\n    msg[\"groups\"] = groups;\n\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 780,
        "wires": [
            [
                "a241121aceaaed88"
            ]
        ]
    },
    {
        "id": "40f5f4a46501b0a8",
        "type": "http in",
        "z": "4c34539a4e0991ba",
        "name": "",
        "url": "/aaa",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 940,
        "wires": [
            [
                "9382d35b5e181b6a"
            ]
        ]
    },
    {
        "id": "a15d442678ebb6d4",
        "type": "http response",
        "z": "4c34539a4e0991ba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c9b70608cb6f75c2",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "\nlet json= JSON.parse(global.get(\"aaa\"));\nlet token = json.access_token;\n\n//let decoded = new Buffer(token,'base64').toString('ascii');\n\nmsg[\"token\"]= token;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 880,
        "wires": [
            [
                "8c40870accfe7116"
            ]
        ]
    },
    {
        "id": "800132fa84093324",
        "type": "function",
        "z": "39aa9db8058c7b09",
        "name": "",
        "func": "global.set(\"aaa\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8c40870accfe7116",
        "type": "https-node",
        "z": "4c34539a4e0991ba",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "url": "https://amserver.dominio.prova/nidp/oauth/nam/keys",
        "authorized": false,
        "agent": true,
        "x": 520,
        "y": 880,
        "wires": [
            [
                "b22926d3d0be9a51"
            ]
        ]
    },
    {
        "id": "b22926d3d0be9a51",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "msg.payload += msg[\"token\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "a15d442678ebb6d4"
            ]
        ]
    },
    {
        "id": "29b15d70a6bef938",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "\nmsg.payload = msg.tokenStatus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 420,
        "wires": [
            [
                "4eafe9c244aa5d0c"
            ]
        ]
    },
    {
        "id": "f5800ab285d18b2e",
        "type": "function",
        "z": "38b26726a9015a16",
        "name": "",
        "func": "msg[\"tokenStatus\"] = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "40d0e65824c2390d",
        "type": "inject",
        "z": "4c34539a4e0991ba",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "9382d35b5e181b6a"
            ]
        ]
    },
    {
        "id": "9382d35b5e181b6a",
        "type": "function",
        "z": "4c34539a4e0991ba",
        "name": "",
        "func": "\ndecript();\n\nasync function decript(){\n  const { compactDecrypt } = global.get(\"compactDecrypt\");\n  const util = global.get(\"util\");\n  //const { decoder } = global.get(\"TextEncoder\");\n  var token = JSON.parse(global.get(\"aaa\"))[\"id_token\"];\n  var privateKey =(global.get(\"privateKey\"));\n\n  const { plaintext, protectedHeader } = await compactDecrypt(token, privateKey);\n\n  let decoder = new util.TextDecoder();\n\n  /*let buff = new Buffer(plaintext, 'ascii');\n  let plaintextDecoded = buff.toString('UTF-8');\n  node.warn(plaintextDecoded);*/\n\n  //const decoder = new util.TextDecoder();\n\n  let decoded = decoder.decode(plaintext);\n\n  let buff = new Buffer(decoded,\"base64\");\n  let plaintextDecoded = buff.toString(\"ascii\");\n\n\n  //msg.payload = plaintextDecoded ;\n\n  let tokenPosition = plaintextDecoded.search(\"]}\");\n  let data = (plaintextDecoded.slice(0,tokenPosition+2));\n\n  let headerPosition = data.search(\"}\");\n  let dataPolished = data.slice(headerPosition+1);\n\n  node.warn(dataPolished);\n\n  let json = JSON.parse(dataPolished);\n\n  node.warn(json.group);\n  node.warn(json.given_name);\n \n\n  msg.payload = dataPolished;\n  node.send(msg);\n  //return msg;\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "a15d442678ebb6d4"
            ]
        ]
    },
    {
        "id": "a1766c2466344dcd",
        "type": "inject",
        "z": "6681e68b76916368",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "3c535ece73cd7d52"
            ]
        ]
    },
    {
        "id": "3c535ece73cd7d52",
        "type": "function",
        "z": "6681e68b76916368",
        "name": "",
        "func": "\nconst {generateSecret} = global.get(\"generateSecret\");\nconst {fromKeyLike} = global.get(\"fromKeyLike\");\nconst {calculateThumbprint} = global.get(\"calculateThumbprint\");\nconst { generateKeyPair } = global.get(\"generateKeyPair\");\n\ncreateArray();\n//node.warn(global.get(\"bbb\"));\n\nasync function createArray(){\n    var array = [];\n    array.push(await generateKey());\n    /*for (var i = 0; i < 4; i++) {\n        array.push(await generateKey());\n    }**/\n    var json = {};\n    json[\"keys\"] = array;\n    global.set(\"bbb\", JSON.stringify(json));\n    \n}\n\n\nasync function generateKey(){\n  \n\n    const { publicKey, privateKey } = await generateKeyPair('RSA1_5');\n    node.warn(privateKey);\n    node.warn(await fromKeyLike(publicKey));\n    node.warn(await fromKeyLike(privateKey));\n    global.set(\"privateKey\",privateKey);\n    global.set(\"publickey\",publicKey);\n    return await fromKeyLike(publicKey);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d0021e4790e05cf5",
        "type": "http in",
        "z": "6681e68b76916368",
        "name": "",
        "url": "/getJWKS",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "1ad50235221c92a6"
            ]
        ]
    },
    {
        "id": "f7ef127e7c2c486b",
        "type": "http response",
        "z": "6681e68b76916368",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 220,
        "wires": []
    },
    {
        "id": "1ad50235221c92a6",
        "type": "function",
        "z": "6681e68b76916368",
        "name": "",
        "func": "msg.payload = global.get(\"bbb\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "f7ef127e7c2c486b"
            ]
        ]
    },
    {
        "id": "0edca9c9ec62abc7",
        "type": "inject",
        "z": "6681e68b76916368",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "e246090e3173d52f"
            ]
        ]
    },
    {
        "id": "e246090e3173d52f",
        "type": "function",
        "z": "6681e68b76916368",
        "name": "",
        "func": "var token =\"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIiwiY3R5IjoiSldUIiwiemlwIjoiREVGIiwia2lkIjoiMiJ9.jHJKapb4967WYfbZ0NkH1eESSZfHd-NF.iHfweV4xDpxwvZmy.vTX8_812WOD_JeqYN78-SJWchTRVQ_4w2PgnTgCv-70ajjXEBWomad5yr4BiFkNmhQAJ9aUlEFBotpwNB-iwHgWgQ5s4GUGOVd4SsJQ2oHb9MYXfsxehZ0itJM_oyKNEPimQjQ31Ez5_UR5cVPpO8Xko4HlLridJPTFOUOjx0AnmfXR91HYryaM9RJJg7eDAb1reVb7v6oznt-AIWkXKDT37b8HNChdbsffaPwEJ5cZ6kDEUYGX-TJeiobtVn-wP7F8zB1kbd3MjsInViW0x2jdZMhR--aHYmUYG9ZAZiEedAqyIU5aALFP68k05w63OVmRw5oPAkIi6rwB49Czh-vj6rsgGXO_VtOziYXdYHfOG-wcbJhVpiMh57XuYUlKjFfL46NkxfL8P2zEJRQ8iBPbkv1HFF2eHgaiZ6UF3p12U_nwAaQFkVvNQizNKgiArtYyVUw4KB-dRDhMHAWv_oxFE03qP9fAuYpNvTrjnYNq8eDxmmTC4wpx1MECjqkNH5mOzTeSxVJL1rlgBLDWR-Jn0hHC80RPBlh0w4YOF85AKdbLeemy2JBLKeFK1Naqlp9npT_Abj8o_PmSxMSkNk1x4_SYqV_-hrvWWI_yiRVC3y9OohCHJyvzMURtDzeyhU7hbdR2Ug0_S7kO2JdGhH8zcX7sx-OxZ2XVeEPlMl6T64Rn7R5gwPlUgTvaCW7fD2aPVwtB_Y0Ps_v8zPS94kzqzcULlg13hQ1q8dUmkFNgSdiJXxk7MxOdXluN0hCFBWIlOLUNwzox7WtpwKkmGj0Dv-wRXjvhG91Uc6LVj9V4sr2bn3JbXili58AbgSejYFy8W8OI1_IdqgXs28WS4uvv8FCXyW2X2O7va1ezWOZEntpF3R8O-bNtiOZ7QcqdShLF56JqoKDZ028CBnZTtV5N-Sl25x_QYKmY78946b1I57Pl6HtCcPpe4LYgM2zb-QtMw4dLOB_us8wpSG8OTwZVkGaHzee2n-RuOv0IcDrlPqonW_f-qsKo9Dc27YddQg_xLqvNc_ThD-EJcYK7H69MEZiAi11zDcJ51-NfSIPlFmI8VJsuD_6bQBWhQSo0e-4arQ9Iwg1sP0t2KRo23ma-wUR34QiWQbKvsforTYnRrnevKK3g1MIrkByiAtLHZJ_JMA6_a-68Bnmgui2fOMZhed5ZMnBGJWa13tuT9pBd4bVjWE95eybdsoxtLe7I6sy-uMw6FuY9PE27JEo3zdna8SMZA3RtkcpOTQvYiSYggBF42KRapDcSf2nsntfaxp83zcBBx9xlmBPckrUt6mTXtnW9oFBoDvFmrnvyKXg5_c9jDRei1VXZWbbGyAgTpSLzgdvM1uS2ISkXXC5oMev1pLZBiIdRFP03lrlnMnc1W4vPwJYRqSReHQZO4Nl6Xu7y-jZWj1NhD7GQSd-Zdl7ZBG5Zl0GhjF52jIIB2IAncOf2xI8_G-73mmMceFP6gBX2CV1u2hL8YGbIyapp4wa-Uld6h8iTJc8ulTkAUj2nYZirZ0_gzTNzlzenO1Zlj_ziJya1w5Se3CmDfByC8EeIOKL1uOyx_RjO2Wv_BejpLZGljWIqtmXdeDZ6AFxDTjd0vo3owXqAhhWhxoG8vMd8qYkDJolVwPsywx_p8tJBPkEKpape7u8rksKZeYk52jgOVszsy7mh1gZbLbVv-zU3AiQ.NuPhxVBai6W_XME3PZ3kCg\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 500,
        "wires": [
            []
        ]
    }
]